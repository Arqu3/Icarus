using UnityEditor;
using UnityEngine;
using System.Linq;
using System.IO;
using System.Collections.Generic;

public class SceneToMenuLoader
{
    static readonly string Path = "Plugins/Spark.Core/Scripts/Editor/";
    static readonly string ClassName = "SceneToMenuItems.cs";
    static readonly string AltPath = "Editor/";

    [MenuItem ("Tools/Reload Scene Menu")]
    private static void ReloadSceneMenu ()
    {
        if ( Directory.Exists (Application.dataPath + "/" + Path) ) GenerateMenuItemFile (Path + ClassName);
        else if ( Directory.Exists (Application.dataPath + "/" + AltPath) ) GenerateMenuItemFile (AltPath + ClassName);
        else Debug.LogWarning ("Could not generate scene menu, neither path '" + Path + "' or '" + AltPath + "' were found");
    }

    static void GetScenesRecursively ( ref List<string> result, string path )
    {
        foreach ( var item in Directory.GetDirectories (path).Select (x => x.Substring (x.LastIndexOf ("/") + 1)) )
        {
            GetScenesRecursively (ref result, path + item + "/");
        }
        result.AddRange (Directory.GetFiles (path).Where (x => x.EndsWith (".unity")).Select (x => x.Substring (x.LastIndexOf ("Scenes") + 7)).Select (x => x.Substring (0, x.LastIndexOf ("."))).ToArray ());
    }

    static void GenerateMenuItemFile ( string pathMinusADP )
    {
        List<string> availableScenes = new List<string> ();
        GetScenesRecursively (ref availableScenes, Application.dataPath + "/Scenes/");
        if ( File.Exists (Application.dataPath + "/" + pathMinusADP) )
        {
            File.Delete (Application.dataPath + "/" + pathMinusADP);
        }

        List<string> lines = new List<string> ();

        lines.Add ("//this file is autogenerated on the date " + System.DateTime.Now);
        lines.Add ("using UnityEngine;");
        lines.Add ("using UnityEditor;");
        lines.Add ("");
        lines.Add ("public static class ScenesToMenuItems");
        lines.Add ("{");

        foreach ( var item in availableScenes )
        {
            lines.Add ("\t[MenuItem(\"Scenes/" + item + "\")]");
            lines.Add ("\tprivate static void SCENE_" + item.ToUpper ()
                .Replace (' ', '_')
                .Replace ('/', '_')
                .Replace ("(", "")
                .Replace (")", "")
                .Replace ('-', '_')
                .Replace (",", "")
                .Replace (".", "")
                .Replace ('@', '_')
                .Replace ('!', '_')
                .Replace ('?', '_')
                .Replace ("'", "")
                .Replace ('"', '_')
                .Replace ("<", "")
                .Replace (">", "")
                .Replace ("|", "")
                .Replace ("*", "")
                + " ()");
            lines.Add ("\t{");
            lines.Add ("\t\tUnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo ();");
            lines.Add ("\t\tUnityEditor.SceneManagement.EditorSceneManager.OpenScene (\"Assets/Scenes/" + item + ".unity\");");
            lines.Add ("\t}");
            lines.Add ("");
        }

        lines.Add ("}");


        File.WriteAllLines (Application.dataPath + "/" + pathMinusADP, lines.ToArray ());
        AssetDatabase.ImportAsset ("Assets/" + pathMinusADP);
    }
}

